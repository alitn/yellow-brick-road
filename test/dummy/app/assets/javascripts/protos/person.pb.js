// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

/**
 * @fileoverview Generated Protocol Buffer code for file person.proto.
 */

goog.provide('Person');

goog.require('goog.proto2.Message');



/**
 * Message Person.
 * @constructor
 * @extends {goog.proto2.Message}
 */
Person = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(Person, goog.proto2.Message);


/**
 * Overrides {@link goog.proto2.Message#clone} to specify its exact return type.
 * @return {!Person} The cloned message.
 * @override
 */
Person.prototype.clone;


/**
 * Gets the value of the id field.
 * @return {?number} The value.
 */
Person.prototype.getId = function() {
  return /** @type {?number} */ (this.get$Value(1));
};


/**
 * Gets the value of the id field or the default value if not set.
 * @return {number} The value.
 */
Person.prototype.getIdOrDefault = function() {
  return /** @type {number} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the id field.
 * @param {number} value The value.
 */
Person.prototype.setId = function(value) {
  this.set$Value(1, value);
};


/**
 * @return {boolean} Whether the id field has a value.
 */
Person.prototype.hasId = function() {
  return this.has$Value(1);
};


/**
 * @return {number} The number of values in the id field.
 */
Person.prototype.idCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the id field.
 */
Person.prototype.clearId = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the name field.
 * @return {?string} The value.
 */
Person.prototype.getName = function() {
  return /** @type {?string} */ (this.get$Value(2));
};


/**
 * Gets the value of the name field or the default value if not set.
 * @return {string} The value.
 */
Person.prototype.getNameOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the name field.
 * @param {string} value The value.
 */
Person.prototype.setName = function(value) {
  this.set$Value(2, value);
};


/**
 * @return {boolean} Whether the name field has a value.
 */
Person.prototype.hasName = function() {
  return this.has$Value(2);
};


/**
 * @return {number} The number of values in the name field.
 */
Person.prototype.nameCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the name field.
 */
Person.prototype.clearName = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the email field.
 * @return {?string} The value.
 */
Person.prototype.getEmail = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the email field or the default value if not set.
 * @return {string} The value.
 */
Person.prototype.getEmailOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the email field.
 * @param {string} value The value.
 */
Person.prototype.setEmail = function(value) {
  this.set$Value(3, value);
};


/**
 * @return {boolean} Whether the email field has a value.
 */
Person.prototype.hasEmail = function() {
  return this.has$Value(3);
};


/**
 * @return {number} The number of values in the email field.
 */
Person.prototype.emailCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the email field.
 */
Person.prototype.clearEmail = function() {
  this.clear$Field(3);
};



goog.proto2.Message.set$Metadata(Person, {
  0: {
    name: 'Person',
    fullName: 'Person'
  },
  1: {
    name: 'id',
    fieldType: goog.proto2.Message.FieldType.INT32,
    type: Number
  },
  2: {
    name: 'name',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  },
  3: {
    name: 'email',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  }
});
